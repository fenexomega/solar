.new_assignment
  - types = {:"#{t(:individual, scope: [:assignment, :list])}" => Assignment_Type_Individual, :"#{t(:group, scope: [:assignment, :list])}" => Assignment_Type_Group}

  = simple_form_for @assignment, html: {id: 'assignment_form'} do |f|
    = hidden_field_tag :allocation_tags_ids, @allocation_tags_ids

    .form-inputs.block_content
      = f.input :name, required: true
      = f.input :enunciation, required: true

      = f.simple_fields_for :schedule do |s|
        .schedule_dates
          .left= s.input :start_date, as: :string, input_html: {id: 'assignment_start_date', value: l(@assignment.schedule.start_date.to_date, format: :datepicker)}
          .right= s.input :end_date, as: :string, input_html: {id: 'assignment_end_date', value: l(@assignment.schedule.end_date.to_date, format: :datepicker)}

      = f.input :type_assignment, collection: types, include_blank: false, required: true

      = f.simple_fields_for :assignment_enunciation_files do |files|
        = files.input :attachment

      .groups
        - @groups.each do |group|
          %span.collection_check_boxes= group.code

      .right_buttons_assignment
        = button_tag t(:cancel), :class => "btn btn_default btn_lightbox", :type => "button", onclick: "javascript:removeLightBox();"
        = button_tag t(:save), :class => "btn btn_main btn_lightbox", :type => "button", :id => "save"
    

:css
  .schedule_dates .input input, #assignment_type_assignment {
    width: 85px;
  }

  .schedule_dates .left, .right {
    float: left;
  }

:javascript

  jQuery(function($){

    var options = $.extend({}, $.datepicker.regional['#{I18n.locale}']); 
    
    /* impede que o usuário selecione uma data final menor que inicial e uma inicial maior que a final */
    $('#assignment_start_date').datepicker( $.extend({}, options, { onSelect: function(selected) { $('#assignment_end_date').datepicker("option", "minDate", selected); } }) );
    $('#assignment_end_date').datepicker( $.extend({}, options, { onSelect: function(selected) { $('#assignment_start_date').datepicker("option", "maxDate", selected); } }) );

    $('#save').click(function(){
      $('#assignment_form:last').serialize_and_submit({
        files: true,
        replace_list: $(".list_assignments")
      });
    });

    /* se a data ficar vazia, recebe a data que veio ao carregar o formulário ou uma data permitida de acordo com a relação data final - data inicial */
    $('#assignment_end_date').blur(function(){
      if ($(this).datepicker("getDate") == null)
        $(this).datepicker("setDate", new Date("#{@assignment.schedule.end_date}"));
    });

    $('#assignment_start_date').blur(function(){
      if($(this).datepicker("getDate") == null)
        $(this).datepicker("setDate", new Date("#{@assignment.schedule.start_date}"));
    });

  });
