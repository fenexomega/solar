= hidden_field_tag :allocation_tags_ids, @allocation_tags_ids

.block_wrapper.list_assignments{:"data-link-list" => assignments_path(allocation_tags_ids: @allocation_tags_ids)}
  .block_title
    %h2= t(:assignment, scope: [:editions, :items])

  .block_content_toolbar
    .block_toolbar_left.btn-group
      %a.btn.btn_main{:href => "#", 'data-dropdown' => "#dropdown"}
        = content_tag(:i, nil, :class=>'icon-plus-3')
        %i.icon-arrow-down-3
      %div{:id=>"dropdown", :class=>"dropdown dropdown-tip"}
        %ul.dropdown-menu
          - na = t(:new, scope: "assignment.list")
          %li= link_to na, '#', id: 'new_assignment', :"data-link" => new_assignment_path(allocation_tags_ids: [@allocation_tags_ids].flatten), :"data-box-title" => na

    .block_toolbar_right
      .btn-group
        = link_to (content_tag(:i, nil, :class=>'icon-edit')), "#", class: 'btn btn_edit edit_assignment', "data-link-to-edit" => edit_assignment_path(':id', allocation_tags_ids: [@allocation_tags_ids].flatten), "data-edit-title" => t(:edit, scope: "assignment.list"), disabled: true

        = link_to (content_tag(:i, nil, :class=>'icon-trash')), "#", class: 'btn btn_del delete_assignment', :"data-link-delete" => assignment_path(':id', allocation_tags_ids: [@allocation_tags_ids].flatten), :"data-link-to-list" => assignments_path(allocation_tags_ids: [@allocation_tags_ids]), disabled: true

  .block_wrapper.assignments
    - unless @assignments.empty? or @assignments.nil?
      %table.tb_list
        %thead
          %tr.lines
            %th{style: 'text-align:center;'}
              %input#all_assignments{type: "checkbox", :"data-children-names" => "ckb_assignment"}
            %th{style: 'text-align:left;'}= t(:name, scope: "assignment.list")
            %th{style: 'text-align:center;'}= t(:type, scope: "assignment.list")
            %th{style: 'text-align:center;'}= t(:availability, scope: "assignment.list")
            %th{style: 'text-align:center;'}= t(:answers, scope: "assignment.list")

        %tbody
          - @assignments.each do |assignment|
            - can_delete = assignment.sent_assignments.count.zero?
            %tr.lines{id: "tr_#{assignment.id}"}
              %td{style: 'text-align:center;'}
                = check_box_tag("ckb_assignment", assignment.id, false, {class: "ckb_assignment", :"data-can-delete" => can_delete})
              %td
                %div
                  .title
                    = assignment.name
                    - unless assignment.assignment_enunciation_files.empty?
                      %i.icon-paperclip
                  .enunciation= assignment.enunciation.truncate(250)
                  %br/
                  .groups
                    = t(:groups, scope: "assignment.list")
                    - assignment.groups.each do |group|
                      %span.collection_check_boxes= group.code

              %td{style: 'text-align:center;'}
                %div.title= t(((assignment.type_assignment.to_i == Assignment_Type_Individual) ? :individual : :group), scope: "assignment.list")
              %td{style: 'text-align:center;'}
                %div
                  %span= l(assignment.schedule.start_date, format: :normal)
                  %span= ' - '
                  %span= l(assignment.schedule.end_date, format: :normal)

              %td{style: 'text-align:center;'}
                %div= can_delete ? t(:no, scope: "assignment.list") : t(:yes, scope: "assignment.list")

    - else
      .block_content.block_content_text= t(:none, scope: "assignment.list")

:javascript

  $(function(){
    $('#all_assignments').nice_checkbox();

    $('#new_assignment').click(function() {
      showLightBoxURL($(this).data('link'), 550, 255, true, $(this).data('box-title'));
    });

    $('.edit_assignment').click(function() {
      if ($(this).attr('disabled') == 'disabled')
        return false;

      var assignments_ids = $('.ckb_assignment:checked', $(this).parents("div.list_assignments")).map(function() { return this.value; }).get();
      if (!(!assignments_ids.length || assignments_ids.length > 1)) {
        var url_edit = $(this).data('link-to-edit').replace(':id', assignments_ids);
        showLightBoxURL(url_edit, 550, 255, true, $(this).data('edit-title'));
      }
      return false;
    });

    $('.delete_assignment').click(function() {
      if ($(this).attr('disabled') == 'disabled' || !confirm("#{t(:message_confirm)}"))
        return false;

      // tentar melhorar o nice_delete para incluir a delecao de muitas linhas

      var assignments = $('.ckb_assignment:checked', $(this).parents("div.list_assignments"));
      var assignments_ids = assignments.map(function() { return this.value; }).get();
      if (assignments_ids.length) {
        $.delete($(this).data('link-delete').replace(':id', assignments_ids), function(data){
          flash_message(data.notice, 'notice');
          assignments.parents('tr').fadeOut().remove();

          $(".btn_edit, .btn_del").attr("disabled", true);
        }).error(function(data){
          var data = $.parseJSON(data.responseText);
          if (typeof(data.alert) != "undefined")
            flash_message(data.alert, 'alert');
        });
      }

      return false;
    });
  });
